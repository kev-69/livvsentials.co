generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

model Admin {
    id                      String  @id @default(uuid())
    email                   String  @unique
    password                String
    firstName               String
    lastName                String
    profilePhoto            String?
    role                    UserRole    @default(ADMIN)
    supportTickets          SupportTicket[]
    tickerMessages          TicketMessage[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@index(email)
}

// ======== USER-RELATED MODELS ========
model User {
    id                      String  @id @default(uuid())
    email                   String  @unique
    password                String
    firstName               String
    lastName                String
    role                    UserRole    @default(USER)
    phone                   String
    orders                  Order[]
    carts                   Cart[]
    wishlists               Wishlist[]
    addresses               UserAddress[]
    verificationTokens      VerificationToken[]
    reviews                 Review[]
    questions               Question[]
    supportTickets      SupportTicket[]
    ticketMessages      TicketMessage[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@index(email)
}

enum UserRole {
    USER
    ADMIN
}

model UserAddress {
    id              String  @id @default(uuid())
    streetName      String
    city            String
    postalCode      String
    region          String
    userId          String
    user            User    @relation(fields: [userId], references: [id])
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@index([userId])
}

model VerificationToken {
    id        String   @id @default(uuid())
    token     String   @unique
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expiresAt DateTime
    createdAt DateTime @default(now())
    
    @@index([token])
    @@index([userId])
}

model PasswordReset {
    id        String   @id @default(uuid())
    email     String   @unique
    code      String
    expiresAt DateTime
    used      Boolean  @default(false)
    createdAt DateTime @default(now())
    
    @@index([email])
}

// ======== PRODUCT-RELATED MODELS ========
model Category {
    id             String  @id @default(uuid())
    name           String  @unique
    slug           String  @unique
    description    String
    products       Product[]
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    @@index([slug])
}

model Product {
    id              String  @id @default(uuid())
    name            String
    slug            String  @unique
    price           Float   @default(0.00)
    salePrice       Float?
    description     String
    stockQuantity   Int     @default(0)
    inStock         Boolean     @default(true)
    productImages   String[]
    categoryId      String
    category        Category    @relation(fields: [categoryId], references: [id])
    orders          Order[]
    orderItems      OrderItem[]
    cartItems       CartItem[]
    wishlistItems   Wishlist[]
    reviews         Review[]
    questions       Question[]
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@index([categoryId])
    @@index([slug])
}

// ======== REVIEWS & QUESTIONS MODELS ========
model Review {
    id              String      @id @default(uuid())
    userId          String
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    productId       String
    product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
    rating          Int         @default(0)
    title           String
    content         String      @db.Text
    images          String[]
    reply           String?     @db.Text
    status          ReviewStatus @default(PENDING)
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@index([userId])
    @@index([productId])
    @@index([status])
}

enum ReviewStatus {
    PUBLISHED
    PENDING
    HIDDEN
}

model Question {
    id              String          @id @default(uuid())
    userId          String
    user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    productId       String
    product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
    question        String          @db.Text
    answer          String?         @db.Text
    status          QuestionStatus  @default(PENDING)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    @@index([userId])
    @@index([productId])
    @@index([status])
}

enum QuestionStatus {
    ANSWERED
    PENDING
}

// ======== PLATFORM SETTINGS MODELS ========
model PlatformSettings {
    id              String      @id @default(uuid())
    settingKey      String      @unique
    settingValue    Json
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@index([settingKey])
}

// ======== NOTIFICATION MODELS ========
model Notification {
    id              String              @id @default(uuid())
    recipient       String
    message         String              @db.Text
    notificationType NotificationType
    orderId         String?
    order           Order?              @relation(fields: [orderId], references: [id], onDelete: SetNull)
    status          NotificationStatus  @default(PENDING)
    termiiMessageId String?
    credits         Int                 @default(0)
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt

    @@index([recipient])
    @@index([orderId])
    @@index([status])
}

enum NotificationType {
    ORDER_CONFIRMATION
    SHIPPING_UPDATE
    DELIVERY_CONFIRMATION
    ORDER_CANCELLATION
    PAYMENT_REMINDER
}

enum NotificationStatus {
    PENDING
    DELIVERED
    FAILED
}

model NotificationTemplate {
    id              String              @id @default(uuid())
    templateId      String              @unique
    name            String
    content         String              @db.Text
    type            NotificationType
    active          Boolean             @default(true)
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt

    @@index([templateId])
}

// ======== HELP CENTER MODELS ========
model SupportTicket {
    id              String          @id @default(uuid())
    ticketNumber    String          @unique
    subject         String
    userId          String?
    user            User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
    adminId         String?
    admin           Admin?          @relation(fields: [adminId], references: [id], onDelete: SetNull)
    customerName    String
    customerEmail   String
    status          TicketStatus    @default(OPEN)
    priority        TicketPriority  @default(MEDIUM)
    messages        TicketMessage[]
    orderId         String?
    order           Order?          @relation(fields: [orderId], references: [id], onDelete: SetNull)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    resolvedAt      DateTime?

    @@index([userId])
    @@index([adminId])
    @@index([orderId])
    @@index([status])
    @@index([ticketNumber])
}

model TicketMessage {
    id              String        @id @default(uuid())
    ticketId        String
    ticket          SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
    content         String        @db.Text
    senderType      SenderType
    userId          String?
    user            User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
    adminId         String?
    admin           Admin?        @relation(fields: [adminId], references: [id], onDelete: SetNull)
    createdAt       DateTime      @default(now())

    @@index([ticketId])
    @@index([userId])
    @@index([adminId])
}

enum TicketStatus {
    OPEN
    PENDING
    RESOLVED
}

enum TicketPriority {
    LOW
    MEDIUM
    HIGH
}

enum SenderType {
    CUSTOMER
    ADMIN
    SYSTEM
}

// ======== SHOPPING-RELATED MODELS ========
model Cart {
    id          String  @id  @default(uuid())
    userId      String
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    cartItems   CartItem[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@index([userId])
}

model CartItem {
    id          String  @id  @default(uuid())
    cartId      String
    productId   String
    quantity    Int @default(1)
    cart        Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
    product     Product @relation(fields: [productId], references: [id], onDelete: Restrict)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@unique([cartId, productId])
    @@index([productId])
}

model Wishlist {
    id          String  @id @default(uuid())
    userId      String
    productId   String
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt   DateTime    @default(now())
    
    @@unique([userId, productId])
    @@index([productId])
    @@index([userId])
}

// ======== ORDER-RELATED MODELS ========
model Order {
    id              String  @id @default(uuid())
    orderNumber     String  @unique
    userId          String
    user            User    @relation(fields: [userId], references: [id], onDelete: Restrict)
    totalAmount     Float
    orderStatus     OrderStatus @default(PROCESSING)
    shippingAddress String?
    guestCheckout   Boolean @default(false)
    products        Product[]
    orderItems      OrderItem[]
    payments        Payment[]
    notifications   Notification[]
    supportTickets  SupportTicket[]
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@index([userId])
    @@index([orderNumber])
    @@index([orderStatus])
}

enum OrderStatus {
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

model OrderItem {
    id          String  @id @default(uuid())
    orderId     String
    order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    productId   String
    product     Product @relation(fields: [productId], references: [id], onDelete: Restrict)
    quantity    Int     @default(1)
    price       Float
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@index([orderId, productId])
    @@index([productId])
}

model Payment {
    id              String  @id @default(uuid())
    orderId         String
    order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    amount          Float
    transactionId   String? @unique
    paymentMethod   PaymentMethod
    paymentStatus   PaymentStatus   @default(PROCESSING)
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@index([orderId])
    @@index([paymentStatus])
}

enum PaymentMethod {
    MOBILE_MONEY
    CREDIT_CARD
}

enum PaymentStatus {
    PROCESSING
    COMPLETED
    CANCELLED
    REFUNDED
}